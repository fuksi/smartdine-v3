generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id                     String        @id @default(uuid())
  name                   String
  slug                   String        @unique
  description            String?
  logoUrl                String?
  address                String
  phone                  String?
  email                  String?
  isActive               Boolean       @default(true)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  stripeConnectAccountId String?
  stripeConnectEnabled   Boolean       @default(false)
  stripeConnectSetupAt   DateTime?
  adminUsers             AdminUser[]
  menu                   Menu?
  openingHours           OpeningHour[]
  orders                 Order[]
  stampCards             StampCard[]

  @@map("merchants")
}

model Menu {
  id         String     @id @default(uuid())
  merchantId String     @unique
  name       String     @default("Menu")
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
  merchant   Merchant   @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("menus")
}

model Category {
  id          String    @id @default(uuid())
  menuId      String
  name        String
  description String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  canShip     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  menu        Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  products    Product[]

  @@map("categories")
}

model Product {
  id          String          @id @default(uuid())
  categoryId  String
  name        String
  description String?
  price       Decimal
  imageUrl    String?
  isAvailable Boolean         @default(true)
  canShip     Boolean         @default(false)
  sortOrder   Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderItems  OrderItem[]
  options     ProductOption[]
  category    Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model ProductOption {
  id               String               @id @default(uuid())
  productId        String?
  name             String
  description      String?
  type             ProductOptionType
  isRequired       Boolean              @default(false)
  sortOrder        Int                  @default(0)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  orderItemOptions OrderItemOption[]
  optionValues     ProductOptionValue[]
  product          Product?             @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_options")
}

model ProductOptionValue {
  id               String            @id @default(uuid())
  optionId         String
  name             String
  priceModifier    Decimal           @default(0)
  isDefault        Boolean           @default(false)
  sortOrder        Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  orderItemOptions OrderItemOption[]
  option           ProductOption     @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("product_option_values")
}

model Order {
  id                      String        @id @default(uuid())
  displayId               Int           @unique
  merchantId              String
  customerId              String?
  customerName            String
  customerPhone           String
  customerEmail           String?
  totalAmount             Decimal
  status                  OrderStatus   @default(PLACED)
  fulfilmentType          String        @default("PICKUP")
  estimatedPickupTime     DateTime?
  pickupTime              DateTime?
  deliveryAddress         String?
  deliveryPostalCode      String?
  deliveryCity            String?
  shippingCost            Decimal?
  notes                   String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  stripePaymentIntentId   String?
  stripeCheckoutSessionId String?
  paymentStatus           PaymentStatus @default(PENDING)
  paymentAmount           Decimal?
  paymentCapturedAmount   Decimal?
  paymentCapturedAt       DateTime?
  items                   OrderItem[]
  customer                Customer?     @relation(fields: [customerId], references: [id])
  merchant                Merchant      @relation(fields: [merchantId], references: [id])

  @@map("orders")
}

model OrderItem {
  id         String            @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal
  totalPrice Decimal
  createdAt  DateTime          @default(now())
  options    OrderItemOption[]
  order      Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product           @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderItemOption {
  id            String             @id @default(uuid())
  orderItemId   String
  optionId      String
  optionValueId String
  createdAt     DateTime           @default(now())
  option        ProductOption      @relation(fields: [optionId], references: [id])
  optionValue   ProductOptionValue @relation(fields: [optionValueId], references: [id])
  orderItem     OrderItem          @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("order_item_options")
}

model AdminUser {
  id         String            @id @default(uuid())
  email      String            @unique
  merchantId String?
  role       AdminRole         @default(MERCHANT_ADMIN)
  isActive   Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  sessions   AdminSession[]
  merchant   Merchant?         @relation(fields: [merchantId], references: [id])

  @@map("admin_users")
}

model AdminSession {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_sessions")
}

model OpeningHour {
  id         String   @id @default(uuid())
  merchantId String
  dayOfWeek  Int
  isOpen     Boolean  @default(true)
  openTime   String?
  closeTime  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@unique([merchantId, dayOfWeek])
  @@map("opening_hours")
}

model StampCard {
  id             String   @id @default(uuid())
  merchantId     String
  phoneNumber    String
  firstName      String
  stampsRequired Int      @default(10)
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  merchant       Merchant @relation(fields: [merchantId], references: [id])
  stamps         Stamp[]

  @@unique([merchantId, phoneNumber])
  @@map("stamp_cards")
}

model Stamp {
  id          String    @id @default(uuid())
  stampCardId String
  isClaimed   Boolean   @default(false)
  claimedAt   DateTime?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  stampCard   StampCard @relation(fields: [stampCardId], references: [id], onDelete: Cascade)

  @@map("stamps")
}

model SuperAdmin {
  id        String              @id @default(uuid())
  email     String              @unique
  isActive  Boolean             @default(true)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  otpCodes  SuperAdminOTP[]
  sessions  SuperAdminSession[]

  @@map("super_admins")
}

model SuperAdminSession {
  id        String     @id @default(uuid())
  adminId   String
  token     String     @unique
  expiresAt DateTime
  createdAt DateTime   @default(now())
  admin     SuperAdmin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("super_admin_sessions")
}

model SuperAdminOTP {
  id        String     @id @default(uuid())
  adminId   String
  code      String
  expiresAt DateTime
  isUsed    Boolean    @default(false)
  createdAt DateTime   @default(now())
  admin     SuperAdmin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("super_admin_otps")
}

model Customer {
  id          String           @id @default(uuid())
  phone       String           @unique
  firstName   String?
  lastName    String?
  email       String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  orders      Order[]
  otpCodes    CustomerOTP[]
  sessions    CustomerSession[]

  @@map("customers")
}

model CustomerSession {
  id         String   @id @default(uuid())
  customerId String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_sessions")
}

model CustomerOTP {
  id         String   @id @default(uuid())
  customerId String?
  phone      String
  code       String
  expiresAt  DateTime
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_otps")
}

enum ProductOptionType {
  RADIO
  MULTISELECT

  @@map("product_option_type")
}

enum AdminRole {
  MERCHANT_ADMIN
  SUPER_ADMIN

  @@map("admin_role")
}

enum OrderStatus {
  PLACED
  ACCEPTED
  REJECTED
  PROCESSING
  READY_FOR_PICKUP
  FULFILLED

  @@map("order_status")
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  CANCELED
  REFUNDED

  @@map("payment_status")
}
